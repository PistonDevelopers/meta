/* PISTON-META syntax

Piston-Meta is a high level meta language for transforming text into a tree.
It is designed for rapid prototyping and infrastructure in game engines.
Developed and maintained as part of the Piston project.

Strings:

    You can reuse strings through the rules.
    All strings starts with `_`.

Built-in rules:

    All built-in rules start with `.`.

    .w      Whitespace.
            `.w?` is optional and `.w!` is required.

    .t      Text string.
            `.t?` allows empty string and `.t!` disallow empty string.
            `.t?:"message"` generates a meta string with name "message".

    .$      Number.
            `.$_` allows underscore `_` as visible seperator, eg. `1_000`
            `.$:"message"` generates a meta number with name "message".

    .._any   Reads until whitespace or any of the characters in the string.
            `.._any?` allows empty

    ..._any  Reads until any of the characters in the string.
             `..._any?` allows empty and `..._any!` disallow empty.

*/

_opt: "optional"
_inv: "inverted"
_prop: "property"
_any: "any_characters"
_seps: "[]{}():.!?\""
0 comment = {["/*" ..."*/"? "*/"] ["//" ..."\n"?]}
1 string = ["_" .._seps!:"name" ":" .w? .t?:"text"]
2 node = [.$:"id" .w! !"_" !"." .._seps!:"name" .w? "=" .w? rule:"rule"]
3 set = {.t!:"value" ["_" .._seps!:"ref"]}
4 set_opt = {.t?:"value" ["_" .._seps!:"ref"]}
5 opt = {"?":_opt "!":!_opt}
6 number = [".$" ?"_":"underscore" ?[":" set:_prop]]
7 text = [".t" {"?":"allow_empty" "!":!"allow_empty"} ?[":" set:_prop]]
8 reference = [!"_" !"." .._seps!:"name" ?[":" set:_prop]]
9 sequence = ["[" .w? .s!.(.w! rule:"rule") "]"]
10 select = ["{" .w? .s!.(.w! rule:"rule") "}"]
11 separated_by = [".s" opt ?".":"allow_trail"
  "(" .w? rule:"by" .w! rule:"rule" .w? ")"]
12 token = [?"!":"not" set:"text" ?[":" ?"!":_inv set:_prop]]
13 optional = ["?" rule:"rule"]
14 whitespace = [".w" opt]
15 until_any_or_whitespace = [".." set_opt:_any opt ?[":" set:_prop]]
16 until_any = ["..." set_opt:_any opt ?[":" set:_prop]]
17 repeat = [".r" opt "(" rule:"rule" ")"]
18 lines = [".l(" .w? rule:"rule" .w? ")"]
19 rule = {
  whitespace:"whitespace"
  until_any_or_whitespace:"until_any_or_whitespace"
  until_any:"until_any"
  lines:"lines"
  repeat:"repeat"
  number:"number"
  text:"text"
  reference:"reference"
  sequence:"sequence"
  select:"select"
  separated_by:"separated_by"
  token:"token"
  optional:"optional"
}
20 document = [
    .l([.w? {string:"string" comment}])
    .l([.w? {node:"node" comment}])
    .w?
]
